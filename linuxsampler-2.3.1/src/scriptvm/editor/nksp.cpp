
#line 3 "lex.Nksp_.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define Nksp__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Nksp__create_buffer
#endif

#ifdef yy_delete_buffer
#define Nksp__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Nksp__delete_buffer
#endif

#ifdef yy_scan_buffer
#define Nksp__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Nksp__scan_buffer
#endif

#ifdef yy_scan_string
#define Nksp__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Nksp__scan_string
#endif

#ifdef yy_scan_bytes
#define Nksp__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Nksp__scan_bytes
#endif

#ifdef yy_init_buffer
#define Nksp__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Nksp__init_buffer
#endif

#ifdef yy_flush_buffer
#define Nksp__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Nksp__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define Nksp__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Nksp__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define Nksp__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Nksp__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define Nksp_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Nksp_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define Nksp_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Nksp_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define Nksp_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Nksp_ensure_buffer_stack
#endif

#ifdef yylex
#define Nksp_lex_ALREADY_DEFINED
#else
#define yylex Nksp_lex
#endif

#ifdef yyrestart
#define Nksp_restart_ALREADY_DEFINED
#else
#define yyrestart Nksp_restart
#endif

#ifdef yylex_init
#define Nksp_lex_init_ALREADY_DEFINED
#else
#define yylex_init Nksp_lex_init
#endif

#ifdef yylex_init_extra
#define Nksp_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Nksp_lex_init_extra
#endif

#ifdef yylex_destroy
#define Nksp_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Nksp_lex_destroy
#endif

#ifdef yyget_debug
#define Nksp_get_debug_ALREADY_DEFINED
#else
#define yyget_debug Nksp_get_debug
#endif

#ifdef yyset_debug
#define Nksp_set_debug_ALREADY_DEFINED
#else
#define yyset_debug Nksp_set_debug
#endif

#ifdef yyget_extra
#define Nksp_get_extra_ALREADY_DEFINED
#else
#define yyget_extra Nksp_get_extra
#endif

#ifdef yyset_extra
#define Nksp_set_extra_ALREADY_DEFINED
#else
#define yyset_extra Nksp_set_extra
#endif

#ifdef yyget_in
#define Nksp_get_in_ALREADY_DEFINED
#else
#define yyget_in Nksp_get_in
#endif

#ifdef yyset_in
#define Nksp_set_in_ALREADY_DEFINED
#else
#define yyset_in Nksp_set_in
#endif

#ifdef yyget_out
#define Nksp_get_out_ALREADY_DEFINED
#else
#define yyget_out Nksp_get_out
#endif

#ifdef yyset_out
#define Nksp_set_out_ALREADY_DEFINED
#else
#define yyset_out Nksp_set_out
#endif

#ifdef yyget_leng
#define Nksp_get_leng_ALREADY_DEFINED
#else
#define yyget_leng Nksp_get_leng
#endif

#ifdef yyget_text
#define Nksp_get_text_ALREADY_DEFINED
#else
#define yyget_text Nksp_get_text
#endif

#ifdef yyget_lineno
#define Nksp_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Nksp_get_lineno
#endif

#ifdef yyset_lineno
#define Nksp_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Nksp_set_lineno
#endif

#ifdef yyget_column
#define Nksp_get_column_ALREADY_DEFINED
#else
#define yyget_column Nksp_get_column
#endif

#ifdef yyset_column
#define Nksp_set_column_ALREADY_DEFINED
#else
#define yyset_column Nksp_set_column
#endif

#ifdef yywrap
#define Nksp_wrap_ALREADY_DEFINED
#else
#define yywrap Nksp_wrap
#endif

#ifdef yyalloc
#define Nksp_alloc_ALREADY_DEFINED
#else
#define yyalloc Nksp_alloc
#endif

#ifdef yyrealloc
#define Nksp_realloc_ALREADY_DEFINED
#else
#define yyrealloc Nksp_realloc
#endif

#ifdef yyfree
#define Nksp_free_ALREADY_DEFINED
#else
#define yyfree Nksp_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Nksp_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[887] =
    {   0,
       21,   22,   21,   22,   27,   27,   42,   40,   41,   38,
       40,   41,   36,   41,   39,   40,   41,   40,   41,   40,
       41,   40,   41,   40,   41,    2,   40,   41,16387,16388,
       40,   41,   40,   41,   35,   40,   41,   35,   40,   41,
       35,   40,   41,   35,   40,   41,   35,   40,   41,   35,
       40,   41,   35,   40,   41,   35,   40,   41,   35,   40,
       41,   35,   40,   41,   35,   40,   41,   35,   40,   41,
       35,   40,   41,   35,   40,   41,   35,   40,   41,   35,
       40,   41,   35,   40,   41,   35,   40,   41,   40,   41,
       40,   41,   35,   40,   41,   35,   40,   41,   35,   40,

       41,   35,   40,   41,   35,   40,   41,   38,   40,   41,
       40,   41,   10,   40,   41,    9,   40,   41,    9,   40,
       41,    9,   40,   41,    9,   40,   41,    9,   40,   41,
       38,   40,   41,   40,   41,   13,   40,   41,   12,   40,
       41,   12,   40,   41,   12,   40,   41,   12,   40,   41,
       12,   40,   41,   16,   40,   41,   16,   40,   41,   16,
       40,   41,   16,   40,   41,   16,   40,   41,   17,   40,
       41,   17,   40,   41,   17,   40,   41,   17,   40,   41,
       17,   40,   41,   22,   40,   41,   21,   22,   38,   40,
       41,   21,   36,   41,   21,   22,   40,   41,   22,   40,

       41,   22,   40,   41,   22,   40,   41,   22,   40,   41,
       38,   40,   41,   40,   41,   18,   40,   41,   40,   41,
       40,   41,   40,   41,   40,   41,   38,   40,   41,   40,
       41,   19,   40,   41,   38,   40,   41,   40,   41,   25,
       40,   41,   25,   40,   41,   25,   40,   41,   25,   40,
       41,   25,   40,   41,   27,   38,   40,   41,   27,   40,
       41,   40,   41,   40,   41,   40,   41,   40,   41,   40,
       41,    5,   40,   41,16390,    5,   40,   41,16390,    7,
       40,   41,   40,   41,   39,    1,   30,   30,   33,   33,
        2,16387,16388, 8196, 8195, 8195,   34,   34,   32,   32,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   29,   35,   35,   35,   24,   35,   35,
       35,   35,   35,   35,   37,   31,   31,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   10,    9,
        9,    9,    9,    9,    9,   13,   12,   12,   12,   12,
       12,   12,   16,   16,   16,   16,   16,   16,   17,   17,
       17,   17,   17,   17,   22,   22,   21,   22,   21,   22,
       22,   22,   22,   18,   19,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27, 8198,    5,16390,    5,16390,
        5,16390,    7,    1,   30,   30,   30,   33,   33,   33,

        2,16387,16388, 8195, 8195,   34,   34,   34,   32,   32,
       32,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       26,   35,   35,   35,   35,   35,   35,   35,   37,   31,
       31,   31,   35,   35,   29,   35,   35,   35,   23,   35,
       35,   35,    9,    9,    9,    9,   12,   12,   12,   12,
       16,   16,   16,   16,   17,   17,   17,   17,   22,   22,
       22,   22,   25,   25,   25,   25,   30,   33,   28,   34,
       32,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   31,   35,   35,   35,   35,    9,    9,
        9,    9,   12,   12,   12,   12,   16,   16,   16,   16,

       17,   17,   17,   17,   22,   22,   22,   22,   25,   25,
       25,   25,   30,   33,   34,   32,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   31,   35,   35,    9,    9,
        9,    9,   12,   12,   12,   12,   16,   16,   16,   16,
       17,   17,   17,   17,   22,   22,   22,   22,   25,   25,
       25,   25,   30,   33,   34,   32,   35,   35,   35,   35,
       35,   35,   35,   35,   31,   35,   35,    9,    9,    9,
        9,   12,   12,   12,   12,   16,   16,   16,   16,   17,
       17,   17,   17,   22,   22,   22,   22,   25,   25,   25,
       25,   30,   33,   34,   32,   35,   35,   35,   35,   35,

       35,   35,   31,   35,    9,    9,    9,    9,   12,   12,
       12,   12,   16,   16,   16,   16,   17,   17,   17,   17,
       22,   22,   22,   22,   25,   25,   25,   25,   30,   33,
       34,   32,   35,   35,   35,   35,   35,   35,   31,   35,
        9,    9,    9,    9,   12,   12,   12,   12,   16,   16,
       16,   16,   17,   17,   17,   17,   22,   22,   22,   22,
       25,   25,   25,   25,   30,   33,   34,   32,   35,   35,
       35,   35,   35,   35,   31,   35,    9,    9,    9,    9,
       12,   12,   12,   12,   16,   16,   16,   16,   17,   17,
       17,   17,   22,   22,   22,   22,   25,   25,   25,   25,

       30,   33,   34,   32,   35,   35,   35,   35,   35,   31,
        9,    9,    9,    9,   12,   12,   12,   12,   16,   16,
       16,   16,   17,   17,   17,   17,   22,   22,   22,   22,
       25,   25,   25,   25,   30,   33,   34,   32,   35,   35,
       35,   35,   35,   31,    9,    9,    9,    9,   12,   12,
       12,   12,   16,   16,   16,   16,   17,   17,   17,   17,
       22,   22,   22,   22,   25,   25,   25,   25,   30,   33,
       34,   32,   20,   35,   35,   35,   14,   35,   31,    9,
       20,    9,    9,    9,   12,   20,   12,   12,   12,   16,
       20,   16,   16,   16,   17,   20,   17,   17,   17,   20,

       22,   22,   22,   22,   14,   22,   22,   20,   20,   25,
       25,   25,   25,   20,   20,   30,   20,   33,   20,   34,
       20,   32,   35,   35,   35,   20,   20,   31,    9,    9,
        9,   12,   12,   12,   16,   16,   16,   17,   17,   17,
       22,   22,   22,   25,   25,   25,   35,    8,   35,    9,
        9,   12,   12,   16,   16,   17,   17,   22,   22,    8,
       22,   22,   25,   25,   35,   35,    9,    9,   12,   12,
       16,   16,   17,   17,   22,   22,   25,   25,   11,   15,
       22,   11,   22,   22,   15,   22
    } ;

static const flex_int16_t yy_accept[827] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    5,    5,    5,    5,    5,    5,
        5,    6,    7,    7,    7,    7,    7,    8,   10,   13,
       15,   18,   20,   22,   24,   26,   31,   33,   35,   38,
       41,   44,   47,   50,   53,   56,   59,   62,   65,   68,
       71,   74,   77,   80,   83,   86,   89,   91,   93,   96,
       99,  102,  105,  108,  111,  113,  116,  119,  122,  125,
      128,  131,  134,  136,  139,  142,  145,  148,  151,  154,
      157,  160,  163,  166,  169,  172,  175,  178,  181,  184,
      187,  192,  195,  199,  202,  205,  208,  211,  214,  216,

      219,  221,  223,  225,  227,  230,  232,  235,  238,  240,
      243,  246,  249,  252,  255,  259,  262,  264,  266,  268,
      270,  272,  276,  280,  283,  285,  285,  285,  286,  286,
      286,  287,  287,  288,  289,  290,  291,  291,  291,  291,
      291,  294,  295,  295,  296,  297,  298,  299,  300,  301,
      302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
      312,  313,  314,  316,  317,  318,  320,  321,  322,  323,
      324,  325,  325,  325,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  339,  339,
      340,  341,  342,  343,  344,  345,  346,  346,  347,  348,

      349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
      359,  360,  361,  362,  363,  364,  365,  366,  367,  369,
      370,  371,  372,  373,  374,  374,  375,  375,  375,  375,
      375,  375,  376,  376,  377,  378,  379,  380,  381,  382,
      383,  384,  385,  385,  385,  385,  385,  385,  385,  386,
      386,  386,  386,  387,  387,  389,  391,  393,  394,  395,
      395,  396,  397,  398,  399,  400,  401,  401,  401,  401,
      404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
      414,  415,  416,  417,  418,  419,  420,  421,  423,  424,
      425,  426,  427,  428,  429,  430,  430,  431,  432,  433,

      434,  435,  437,  438,  439,  441,  442,  443,  444,  445,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457,  458,  459,  460,  461,  462,  463,  463,  463,
      463,  463,  464,  465,  466,  467,  467,  467,  467,  467,
      467,  468,  469,  469,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
      484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  498,  499,  500,  501,  502,  503,
      504,  505,  506,  507,  508,  509,  509,  509,  509,  509,
      510,  511,  512,  513,  513,  513,  513,  513,  513,  514,

      515,  516,  517,  518,  519,  520,  521,  522,  523,  524,
      525,  526,  526,  527,  528,  529,  530,  531,  532,  533,
      534,  535,  536,  537,  538,  539,  540,  541,  542,  543,
      544,  545,  546,  547,  548,  549,  549,  549,  549,  549,
      550,  551,  552,  553,  553,  553,  553,  553,  554,  555,
      556,  557,  558,  559,  560,  561,  562,  563,  564,  565,
      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  581,  582,  583,  584,
      585,  586,  587,  588,  588,  588,  588,  588,  589,  590,
      591,  592,  592,  592,  592,  593,  594,  595,  596,  597,

      598,  599,  600,  601,  602,  603,  603,  604,  605,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      617,  618,  619,  620,  621,  622,  623,  624,  625,  625,
      625,  625,  625,  626,  627,  628,  629,  629,  629,  629,
      630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
      639,  640,  641,  642,  643,  644,  645,  646,  647,  648,
      649,  650,  651,  652,  653,  654,  655,  656,  657,  658,
      659,  660,  661,  661,  661,  661,  661,  662,  663,  664,
      665,  665,  665,  666,  667,  668,  669,  670,  671,  672,
      673,  674,  675,  675,  676,  677,  678,  679,  680,  681,

      682,  683,  684,  685,  686,  687,  688,  689,  690,  691,
      692,  693,  694,  695,  696,  697,  697,  697,  697,  697,
      698,  699,  700,  701,  701,  701,  702,  703,  704,  705,
      706,  707,  708,  709,  710,  710,  711,  712,  713,  714,
      715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  728,  729,  730,  731,  731,  731,  731,
      731,  732,  733,  734,  735,  735,  735,  736,  737,  738,
      739,  740,  741,  742,  743,  744,  744,  745,  746,  747,
      748,  749,  750,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  765,  765,

      765,  765,  766,  767,  768,  769,  769,  769,  770,  771,
      772,  773,  775,  776,  777,  777,  778,  779,  779,  780,
      782,  783,  784,  785,  787,  788,  789,  790,  792,  793,
      794,  795,  797,  798,  799,  800,  802,  803,  804,  805,
      807,  808,  809,  809,  809,  809,  811,  812,  813,  814,
      815,  817,  819,  821,  823,  824,  825,  826,  827,  829,
      830,  831,  832,  833,  834,  835,  836,  837,  838,  839,
      840,  841,  842,  843,  844,  844,  844,  844,  845,  846,
      847,  848,  848,  849,  850,  851,  852,  853,  854,  855,
      856,  857,  858,  859,  860,  862,  863,  863,  863,  864,

      865,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  877,  877,  878,  879,  879,  880,  880,
      881,  882,  884,  885,  887,  887
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    7,    8,    1,    1,    9,
       10,    1,    1,    1,    1,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,   13,   14,   15,   16,   17,   18,   19,   20,
       15,   21,   22,   15,   15,   15,   15,   23,   24,   15,
       15,   25,   26,   27,   28,   15,   15,   15,   15,   15,
        1,    1,    1,    1,   29,    1,   30,   15,   31,   32,

       33,   34,   15,   35,   36,   15,   37,   38,   39,   40,
       41,   42,   15,   43,   44,   45,   46,   15,   47,   15,
       48,   49,   50,    1,   51,   52,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[53] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[851] =
    {   0,
        0,   22,    0,   24,   68,    0,  120,    0,  172,    0,
      224,    0,  275,  302,  329,  356,  383,  410,  438,    0,
      489,    0,  535,    0,  566,  597, 2554, 2534, 2533, 2555,
      277,  279,  643,  695,  269,  737,  783,  835,  887,  939,
       38,   40,  260,  268,  272,  264,  295,  266,  288,  296,
      297,  300,  306,  293,  301,  321,  343,  991,  322,  330,
      326,  345, 1021,  387,  412, 2532, 1069, 1121,  353,  354,
      267,  414,  491, 2531, 1173, 1225,  360,  372,  291, 1277,
     1329,  377,  380,  348, 1381, 1433,  382,  402,  381, 2530,
      500,  495,  524,  404, 2529, 2528,  411,  529,  530, 2527,

      409, 2526, 2525,  487,  540,  566, 2524, 1485, 1537, 1589,
     1641,  488,  493,  495, 1692, 1738,  476,  331,  501,  525,
      391, 1770, 1801, 2523,  341, 2522,  528,  505,  550, 2534,
     2520,  572, 1847, 1899, 1951, 2003,  543,  536,  545,  567,
        0, 2519,  565,  585, 2037, 2083, 2135, 2187, 2239, 2514,
        0,  534, 2510, 2508,  570,  567,  571,  579,  261,  577,
      603,  583, 2511,  607,  588, 2510,  614,  542,  569,  585,
      604,  639, 2481,  660, 2512, 2291, 2343,  637,  638,  623,
      642,  643,  646,  357,  647,  648,  687,  690,  713, 2511,
     2506,    0,  655, 2502, 2500,  657,  717, 2507, 2502,    0,

      694, 2498, 2496,  669, 2499,    0,  717, 2495, 2493,  718,
     2496,    0,  720, 2492, 2490,  731, 2497,  732,  758,  762,
      752,  756,  780, 2496,  796, 2495,  786,  790,  791, 2494,
      819, 2493,    0, 2488,    0, 2487,    0,  721, 2483, 2481,
      800, 2394,  679,  648,  645,  709,  399,  712, 2488,  740,
      792,  781, 2487,  801,  809,  836, 2475, 2485, 2555,  853,
     2480,    0,  804, 2466,    0,  808,  754,  306,  849,  850,
     2469,  839, 2464,    0,  847, 2463,    0,  855,  852,  844,
      853, 2456,  861,  879,  860,  867,  880, 2461,  884,  885,
      886,  887,  888,  891, 2555,  914, 2460,    0,  856,  912,

      919,  895,  928,  898, 2459,  931,  932,  901,  903,  937,
     2452,  938,  904,  940, 2450,  947,  955,  950, 2446,  952,
      961,  959, 2445,  987, 2451,  988,  989,  990, 2450,  992,
     1003, 1000,  964, 1001, 2436,  994,  953,  996,  995, 1031,
     1016, 1017, 1017, 1036, 2440, 1030, 1033, 1035, 2424, 1049,
     1064, 1044, 1008, 1045, 1061, 1062, 1063, 1068, 1069, 1095,
     1070, 1072, 1077, 1088, 1083, 1082, 2422, 1095, 1119, 1085,
     2420, 1120, 1122, 1124, 2416, 1131, 1132, 1128, 2407, 1136,
     1140,  966, 1139,   37, 1032, 1122, 1141, 1148, 1171, 1166,
     2406, 1153, 1168,  832, 1078, 1082, 1174, 1192, 1173, 1174,

     1176, 1177, 1180, 1185, 1186, 1189, 1194, 1012, 1193, 1195,
     1198, 1242, 1219, 1223, 1199, 1226, 1227, 1230, 1234, 1236,
     1237, 1244, 1248, 1266, 1240, 1250, 1271, 1274, 1275, 1278,
     1282, 1284, 1236, 1288, 1289, 1290, 1292, 1295, 1296, 1299,
     1294, 1321, 1323, 1305, 1313, 1307, 1348, 1330, 1334, 1336,
     1338, 1196, 1332, 2409, 1345, 1342, 1343, 1355, 1370, 1394,
     1346, 1376, 1375, 1354, 1353, 2408, 1383, 1384, 1387, 2404,
     1394, 1386, 1398, 2402, 1400, 1403, 1402, 2398, 1406, 2401,
     1411, 1430, 1432, 2398, 1438, 1435, 1441, 1442, 1445, 2393,
     1446, 1429, 1447, 1497, 1444, 1452, 1453, 1454, 2383, 1455,

     1483, 1486, 1479, 1484, 1485, 1507, 1492, 1489, 2374, 1457,
     1495, 1498, 2369, 1499, 1510, 1511, 2357, 1508, 1534, 1536,
     2355, 1530, 1542, 1544, 1545, 1551, 1543, 2363, 1550, 1552,
     1559, 2359, 2345, 1557, 1583, 1563, 1564, 1565, 1604, 2335,
     2330, 2326, 2311, 1592, 2316, 1589, 2308, 1549, 1590, 1615,
     2306, 1591, 1599, 2304, 1597, 2274, 1608, 2262, 1606, 2237,
     1613, 2219, 1634, 2204, 1636, 2200, 1639, 2185, 1618, 1598,
     1646, 1644, 1652, 1651, 1653, 1657, 1660, 2189, 1656, 2176,
     1662, 1682, 1667, 1672, 1679, 1683, 1680, 1664, 1682, 1685,
     1138, 1609, 1710, 1693, 1393, 1691, 1694, 1695, 1697, 1700,

     1707, 1708, 1715, 1718, 1726, 1723, 1725, 1728, 1735, 1732,
     1740, 1741, 1748, 1455, 1749, 1745, 1757, 1751, 1758, 1760,
     1769, 1767, 1773, 1754, 1794, 1775, 1787, 1800, 1802, 1770,
     1805, 1807, 1792, 1811, 1818, 1839, 1823, 1842, 1845, 1850,
     1853, 1852, 1855, 1859, 1862, 1861, 1864, 1868, 1871, 1870,
     1873, 1891, 1897, 1898, 1902, 1906, 1909, 1910, 1911, 1915,
     1913, 1915, 1917, 1921, 1935, 1960, 1924, 1925, 1949, 1951,
     1785, 1812, 1922, 1971, 1497, 1968, 1959, 1900, 1958, 1960,
     2016, 1969, 1966, 1967, 2018, 1976, 2001, 1973, 2028, 2012,
     2009, 2019, 2057, 2184, 1979, 2010, 2096, 2171, 2019, 2025,

     2098, 2029, 2037, 2047, 2109, 1702, 2076, 2042, 2054, 2085,
     2087,    0, 2090, 2161, 2148, 2144, 2096, 2128, 2097,    0,
     2099, 2086, 2076,    0, 2101, 2058, 2027,    0, 2106, 2017,
     1992,    0, 2129, 1952, 1879, 2107, 2056, 2136, 2159, 1871,
     2137, 2143, 2150, 2151, 2152,    0, 2154, 1858, 1849, 2196,
        0,    0,    0,    0, 2157, 2202, 2159, 2205,    0, 2186,
     2211, 2194, 2198, 2252, 2203, 2206, 2258, 2208, 2212, 2263,
     2246, 2039, 2269, 2240, 2258, 2304, 2260, 2284, 2271, 2288,
     1836, 2312, 1831, 2228, 1820, 2260, 1796, 2292, 1783, 2293,
     1758, 2295, 2305, 2327, 1737, 2146, 2307, 2306, 1731, 2311,

     2356, 2358, 2366, 2367, 2368, 2378, 2383, 2395, 2400, 2406,
     2405, 2417, 2435, 2437, 2443, 2448, 2453, 1726, 2458, 1713,
     2459, 1573, 2471, 1521, 2555, 2490, 2492, 1426, 2494, 1401,
     1370, 1317, 1298, 1279, 2496, 1250, 1137,  958,  935,  924,
      807,  779,  715, 2498,  674,  637,  595,  545, 2500,  314
    } ;

static const flex_int16_t yy_def[851] =
    {   0,
      825,    1,    1,    1,  825,    5,  825,    7,  825,    9,
      825,   11,  826,  826,  827,  827,  827,  827,  825,   19,
      827,   21,  827,   23,   23,   23,  825,  828,  828,  825,
      828,  829,  830,  831,  828,  828,  832,  833,  834,  834,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,  835,  836,   40,   40,
       40,   40,   40,  828,  828,  828,  837,  837,   68,   68,
       68,  828,  828,  828,  838,  838,   76,   76,   76,  839,
      839,   81,   81,   81,  840,  840,   86,   86,   86,  841,
      841,  825,  841,  841,  841,  841,  841,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  828,  842,  842,  843,
      843,  111,  111,  111,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  829,  844,
      828,  829,  845,  845,  846,  846,  828,  828,  828,  828,
       36,  828,  828,  828,  828,  847,  847,  848,  848,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,  835,  849,  835,  828,  850,  850,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,  828,  828,
       68,   68,   68,   68,   68,   68,  828,  828,   76,   76,

       76,   76,   76,   76,   81,   81,   81,   81,   81,   81,
       86,   86,   86,   86,   86,   86,  841,  841,  841,  825,
      841,  841,  841,  841,  828,  828,  828,  828,  828,  828,
      828,  828,  109,  111,  111,  111,  111,  111,  111,  111,
      111,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  123,  828,  825,  829,
      134,  134,  134,  136,  136,  136,  828,  828,  828,   36,
      828,  828,  147,  147,  147,  149,  149,  149,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,  825,  835,  177,  177,  177,   40,

       40,   40,   40,   40,   40,   40,   40,   68,   68,   68,
       68,   76,   76,   76,   76,   81,   81,   81,   81,   86,
       86,   86,   86,  841,  841,  841,  841,  828,  828,  828,
      828,  111,  111,  111,  111,  828,  828,  828,  828,  829,
      134,  136,  828,  828,  828,  147,  149,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,  835,
      177,   40,   40,   40,   40,   68,   68,   68,   68,   76,
       76,   76,   76,   81,   81,   81,   81,   86,   86,   86,
       86,  841,  841,  841,  841,  828,  828,  828,  828,  111,
      111,  111,  111,  828,  828,  828,  828,  829,  134,  136,

      147,  149,   40,   40,   40,   40,   40,   40,   40,   40,
       40,  835,  177,   40,   40,   68,   68,   68,   68,   76,
       76,   76,   76,   81,   81,   81,   81,   86,   86,   86,
       86,  841,  841,  841,  841,  828,  828,  828,  828,  111,
      111,  111,  111,  828,  828,  828,  829,  134,  136,  147,
      149,   40,   40,   40,   40,   40,   40,   40,   40,  835,
      177,   40,   40,   68,   68,   68,   68,   76,   76,   76,
       76,   81,   81,   81,   81,   86,   86,   86,   86,  841,
      841,  841,  841,  828,  828,  828,  828,  111,  111,  111,
      111,  828,  828,  829,  134,  136,  147,  149,   40,   40,

       40,   40,   40,   40,   40,  835,  177,   40,   68,   68,
       68,   68,   76,   76,   76,   76,   81,   81,   81,   81,
       86,   86,   86,   86,  841,  841,  841,  841,  828,  828,
      828,  828,  111,  111,  111,  111,  828,  828,  829,  134,
      136,  147,  149,   40,   40,   40,   40,   40,   40,  835,
      177,   40,   68,   68,   68,   68,   76,   76,   76,   76,
       81,   81,   81,   81,   86,   86,   86,   86,  841,  841,
      841,  841,  828,  828,  828,  828,  111,  111,  111,  111,
      828,  829,  134,  136,  147,  149,   40,   40,   40,   40,
       40,   40,  835,  177,   40,   68,   68,   68,   68,   76,

       76,   76,   76,   81,   81,   81,   81,   86,   86,   86,
       86,  841,  841,  841,  841,  828,  828,  828,  828,  111,
      111,  111,  111,  828,  829,  134,  136,  147,  149,   40,
       40,   40,   40,   40,  835,  177,   68,   68,   68,   68,
       76,   76,   76,   76,   81,   81,   81,   81,   86,   86,
       86,   86,  841,  841,  841,  841,  828,  828,  828,  828,
      111,  111,  111,  111,  828,  829,  134,  136,  147,  149,
       40,   40,   40,   40,   40,  835,  177,   68,   68,   68,
       68,   76,   76,   76,   76,   81,   81,   81,   81,   86,
       86,   86,   86,  841,  841,  841,  841,  828,  828,  828,

      828,  111,  111,  111,  111,  828,  829,  134,  136,  147,
      149,   40,   40,   40,  828,  828,   40,  835,  177,   68,
       68,   68,   68,   76,   76,   76,   76,   81,   81,   81,
       81,   86,   86,   86,   86,  841,  841,  841,  841,  841,
      841,  828,  828,  828,  828,  111,  111,  111,  111,  829,
      134,  136,  147,  149,   40,   40,   40,  835,  177,   68,
       68,   68,   76,   76,   76,   81,   81,   81,   86,   86,
       86,  841,  841,  841,  828,  828,  828,  111,  111,  111,
       40,  828,  828,   40,   68,   68,   76,   76,   81,   81,
       86,   86,  841,  841,  841,  841,  828,  828,  111,  111,

       40,   40,   68,   68,   76,   76,   81,   81,   86,   86,
      841,  841,  828,  828,  111,  111,  828,  828,  828,  828,
      841,  841,  841,  841,    0,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825
    } ;

static const flex_int16_t yy_nxt[2608] =
    {   0,
       28,   29,   30,   31,   28,   32,   33,   34,   28,   28,
       35,   36,   37,   38,   39,   39,   39,   39,   40,   39,
       39,   39,   39,   39,   41,   42,   39,   43,   28,   44,
       45,   46,   47,   48,   39,   49,   39,   39,   50,   51,
       52,   53,   39,   54,   55,   39,   56,   39,   39,   57,
       28,   58,   59,  434,   59,  218,  153,   60,  154,   60,
      150,   61,  150,   61,   62,   63,   62,   63,   28,   64,
       30,   28,   65,   28,   28,   28,   28,   66,   28,   28,
       28,   28,   67,   67,   67,   67,   68,   67,   67,   67,
       67,   67,   69,   70,   67,   71,   28,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   28,   28,   28,
       28,   72,   30,   28,   73,   28,   28,   28,   28,   74,
       28,   28,   28,   28,   75,   75,   75,   75,   76,   75,
       75,   75,   75,   75,   77,   78,   75,   79,   28,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   28,
       28,   28,   28,   29,   30,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   80,   80,   80,   80,
       81,   80,   80,   80,   80,   80,   82,   83,   80,   84,

       28,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   28,   28,   28,   28,   29,   30,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   85,   85,
       85,   85,   86,   85,   85,   85,   85,   85,   87,   88,
       85,   89,   28,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   28,   28,   28,   91,   92,   93,   93,
      128,  130,  150,  150,  131,  155,  150,  127,  150,  191,
      150,  286,  196,   94,  150,  127,  159,  132,  137,   95,

       96,  157,   97,   91,   92,   93,   93,  156,  138,  139,
      150,  162,  158,  199,  297,  150,  204,  150,  150,  150,
       94,  163,  150,  150,  127,  169,   95,   96,  150,   97,
       98,   30,  160,   99,  161,  167,  164,  165,  100,  166,
      170,  163,  163,  150,  150,  173,  168,  101,  150,  127,
      344,  157,  150,  102,  103,  171,  104,   98,   30,  127,
       99,  174,  178,  163,  249,  100,  180,  150,  181,  179,
      205,  194,  195,  210,  101,  191,  191,  182,  202,  150,
      102,  103,  199,  104,  105,   30,  183,  106,  189,  258,
      203,  189,  107,  175,  199,  208,  190,  306,  209,  205,

      214,  101,  205,  211,  211,  127,  216,  102,  103,  127,
      104,  105,   30,  189,  106,  197,  189,  127,  197,  107,
      215,  190,  218,  198,  211,  252,  221,  127,  101,  218,
      127,  227,  127,  252,  102,  103,  224,  104,   28,  108,
       30,   28,  109,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  110,  110,  110,  110,  111,  110,  110,  110,
      110,  110,  112,  113,  110,  114,   28,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,   28,   28,   28,
      115,   30,  197,  116,  127,  197,  220,  220,  220,  220,

      198,  219,  220,  219,  219,  127,  239,  101,  128,  127,
      236,  240,  230,  102,  103,  236,  104,  236,  218,  127,
      241,  248,  117,  127,  118,  219,  220,  219,  219,  119,
      225,  225,  120,  225,  225,  121,   29,   30,  226,  226,
      249,  231,  218,  127,  231,  276,  127,  127,  127,  232,
      227,  279,  130,  101,  127,  131,  150,  250,  127,  102,
      103,  127,  104,  127,  150,  122,  123,  231,  132,  122,
      231,  122,  251,  122,  130,  232,  268,  131,  270,  291,
      122,  124,  267,  127,  127,  127,  125,  269,  282,  150,
      132,  150,  150,  150,  260,  273,   28,   28,  163,  150,

       28,  150,   28,  127,   28,  150,  292,  150,  283,  124,
      150,   28,  124,  142,  284,  271,  272,  125,  285,  271,
      287,  271,  289,  271,  293,  150,  150,   28,   28,  150,
      271,   28,  163,   28,  288,   28,  150,  264,  163,  294,
      124,  173,   28,  126,  126,  150,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  174,  290,  150,
      150,  134,  173,  127,  150,  150,  127,  302,  150,  150,
      150,  126,  308,  301,  261,  311,  300,  191,  174,  191,
      304,  249,  296,  303,  249,  305,  179,  315,  307,  175,
      181,  199,  126,  126,  126,  126,  126,  127,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  150,
      175,  312,  150,  136,  189,  236,  199,  189,  197,  182,
      184,  197,  190,  126,  248,  185,  198,  127,  183,  186,
      127,  127,  187,  188,  316,  127,  319,  320,  332,  205,
      205,  250,  211,  236,  126,  126,  126,  140,  141,  323,
      218,  336,  142,  211,  221,  127,  251,  143,  127,  219,
      220,  219,  219,  220,  220,  220,  220,  144,  145,  324,
      218,  144,  127,  144,  218,  144,  218,  337,  221,  234,
      142,  325,  144,  126,  126,  343,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  225,  218,  127,

      225,  147,  221,  328,  127,  226,  326,  217,  127,  127,
      127,  126,  227,  227,  127,  329,  339,  330,  335,  127,
      231,  341,  236,  231,  253,  342,  261,  127,  232,  254,
      264,  338,  126,  126,  126,  126,  126,  127,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  253,
      127,  253,  253,  149,  127,  130,  254,  127,  131,  345,
      126,  270,  349,  126,  346,  255,  150,  127,  271,  273,
      340,  132,  347,  361,  150,  150,  444,  276,  297,  253,
      348,  350,  150,  150,  126,  126,  126,  126,  126,  150,
      126,  126,  126,  126,  126,  126,  126,  126,  163,  126,

      126,  150,  150,  352,  353,  151,  150,  150,  150,  150,
      150,  163,  163,  150,  354,  355,  173,  150,  358,  357,
      150,  367,  371,  191,  211,  191,  199,  305,  359,  366,
      363,  360,  174,  356,  150,  205,  126,  126,  126,  126,
      126,  150,  126,  126,  126,  126,  126,  126,  126,  126,
      150,  126,  126,  150,  150,  352,  362,  151,  199,  191,
      199,  152,  199,  305,  175,  368,  370,  305,  372,  205,
      364,  127,  205,  375,  211,  374,  365,  205,  376,  379,
      378,  211,  391,  211,  218,  395,  236,  380,  126,  126,
      126,  126,  126,  432,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  218,  218,  218,  127,  177,
      127,  221,  127,  127,  127,  382,  384,  385,  386,  126,
      388,  127,  236,  236,  394,  227,  396,  345,  390,  392,
      150,  389,  397,  130,  150,  127,  131,  407,  261,  264,
      126,  126,  126,  150,  399,  400,  345,  457,  435,  132,
      218,  184,  273,  169,  127,  276,  185,  150,  401,  398,
      186,  402,  403,  187,  188,  405,  150,  150,  170,  126,
      126,  150,  126,  126,  126,  126,  126,  126,  126,  126,
      406,  126,  126,  150,  150,  150,  150,  192,  163,  408,
      150,  150,  297,  410,  150,  163,  127,  173,  413,  150,

      127,  163,  411,  409,  191,  150,  415,  199,  445,  416,
      150,  418,  420,  174,  414,  305,  446,  191,  126,  126,
      126,  126,  126,  412,  126,  126,  126,  126,  126,  126,
      126,  126,  362,  126,  126,  419,  422,  191,  423,  192,
      127,  191,  199,  193,  199,  175,  205,  426,  427,  436,
      211,  424,  430,  205,  205,  428,  431,  218,  211,  127,
      150,  221,  211,  227,  438,  433,  127,  437,  163,  442,
      126,  126,  126,  126,  126,  236,  126,  126,  126,  126,
      126,  126,  126,  126,  443,  126,  126,  439,  236,  127,
      236,  200,  127,  440,  130,  261,  264,  131,  273,  276,

      448,  449,  150,  450,  451,  452,  249,  150,  150,  454,
      132,  150,  455,  453,  499,  150,  150,  150,  150,  447,
      150,  150,  126,  126,  126,  126,  126,  458,  126,  126,
      126,  126,  126,  126,  126,  126,  456,  126,  126,  163,
      459,  297,  463,  200,  173,  150,  461,  201,  191,  191,
      176,  464,  191,  466,  218,  465,  191,  467,  199,  199,
      174,  468,  205,  462,  481,  469,  199,  470,  473,  460,
      199,  471,  205,  474,  126,  126,  126,  126,  126,  150,
      126,  126,  126,  126,  126,  126,  126,  126,  205,  126,
      126,  472,  175,  205,  475,  206,  211,  211,  148,  476,

      211,  478,  218,  477,  211,  479,  218,  218,  127,  480,
      127,  482,  483,  127,  127,  484,  236,  146,  486,  487,
      485,  236,  489,  127,  488,  127,  126,  126,  126,  126,
      126,  127,  126,  126,  126,  126,  126,  126,  126,  126,
      492,  126,  126,  236,  490,  236,  491,  206,  500,  493,
      130,  207,  261,  131,  150,  495,  264,  249,  273,  496,
      276,  497,  502,  498,  150,  150,  132,  150,  297,  510,
      135,  507,  509,  494,  163,  191,  191,  150,  126,  126,
      126,  126,  126,  503,  126,  126,  126,  126,  126,  126,
      126,  126,  150,  126,  126,  504,  173,  150,  150,  212,

      512,  133,  513,  514,  517,  191,  199,  305,  205,  199,
      505,  516,  174,  508,  518,  150,  199,  520,  522,  506,
      205,  521,  205,  524,  211,  211,  126,  526,  211,  218,
      126,  126,  126,  126,  126,  305,  126,  126,  126,  126,
      126,  126,  126,  126,  175,  126,  126,  127,  218,  528,
      218,  212,  527,  127,  530,  213,  127,  531,  532,  127,
      533,  534,  540,  536,  236,  127,  261,  236,  236,  537,
      541,  542,  543,  218,  264,  273,  276,  150,  545,  191,
      554,  655,  126,  126,  126,  126,  233,  538,  126,  233,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  130,

      546,  150,  131,  235,  547,  150,  150,  150,  150,  173,
      551,  150,  555,  126,  297,  539,  556,  191,  163,  150,
      191,  199,  558,  548,  549,  550,  552,  559,  163,  560,
      205,  562,  199,  199,  126,  126,  126,  126,  233,  218,
      126,  233,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  563,  211,  566,  564,  235,  205,  175,  205,  567,
      571,  218,  568,  218,  211,  126,  211,  221,  127,  218,
      127,  150,  227,  569,  570,  574,  575,  127,  573,  236,
      578,  580,  127,  127,  591,  236,  126,  126,  126,  126,
      126,  218,  126,  126,  126,  126,  126,  126,  126,  126,

      579,  126,  126,  249,  581,  236,  130,  237,  587,  131,
      589,  150,  150,  150,  150,  596,  218,  173,  598,  191,
      613,  191,  132,  595,  600,  592,  260,  602,  199,  604,
      199,  150,  582,  174,  612,  205,  218,  296,  126,  126,
      126,  126,  126,  593,  126,  126,  126,  126,  126,  126,
      126,  126,  608,  126,  126,  606,  205,  634,  211,  237,
      610,  211,  218,  238,  218,  175,  221,  614,  616,  127,
      127,  127,  615,  617,  618,  127,  620,  622,  236,  227,
      127,  631,  236,  626,  130,  619,  150,  131,  627,  261,
      126,  126,  126,  242,  264,  628,  242,  624,  625,  629,

      132,  273,  150,  630,  150,  276,  633,  150,  632,  636,
      127,  638,  173,  191,  637,  297,  191,  191,  640,  191,
      127,  639,  199,  641,  642,  243,  635,  244,  174,  199,
      199,  127,  245,  249,  643,  246,  644,  199,  247,  242,
      205,  645,  242,  646,  127,  205,  648,  205,  205,  647,
      211,  649,  650,  815,  211,  218,  127,  211,  651,  218,
      175,  652,  211,  127,  653,  654,  218,  218,  657,  127,
      656,  243,  127,  244,  658,  127,  127,  659,  245,  660,
      809,  246,  236,  661,  247,  253,  662,  671,  127,  236,
      254,  236,  150,  663,  664,  236,  130,  261,  667,  131,

      255,  256,  665,  712,  255,  807,  255,  150,  255,  264,
      668,  674,  132,  253,  150,  255,  253,  666,  805,  127,
      173,  254,  273,  669,  276,  670,  672,  150,  673,  150,
      257,  255,  256,  150,  150,  255,  174,  255,  713,  255,
      678,  676,  803,  675,  253,  191,  255,  126,  126,  127,
      126,  126,  126,  126,  126,  126,  126,  126,  801,  126,
      126,  297,  677,  679,  191,  262,  680,  191,  175,  681,
      682,  780,  191,  683,  199,  199,  684,  199,  685,  686,
      779,  199,  687,  205,  205,  688,  205,  689,  690,  218,
      205,  691,  211,  211,  692,  211,  126,  126,  126,  126,

      126,  771,  126,  126,  126,  126,  126,  126,  126,  126,
      693,  126,  126,  211,  694,  218,  218,  262,  720,  695,
      218,  263,  191,  696,  218,  697,  698,  127,  127,  127,
      702,  699,  700,  127,  701,  236,  703,  236,  704,  236,
      705,  708,  709,  236,  150,  714,  261,  264,  126,  126,
      126,  126,  126,  127,  126,  126,  126,  126,  126,  126,
      126,  126,  130,  126,  126,  131,  710,  706,  711,  265,
      173,  273,  715,  276,  770,  715,  719,  707,  132,  716,
      191,  297,  191,  722,  721,  718,  174,  724,  199,  199,
      726,  199,  725,  150,  728,  205,  730,  218,  205,  717,

      126,  126,  126,  126,  126,  737,  126,  126,  126,  126,
      126,  126,  126,  126,  768,  126,  126,  715,  175,  715,
      715,  265,  715,  205,  716,  266,  716,  729,  218,  715,
      732,  211,  715,  738,  211,  733,  716,  127,  191,  767,
      199,  211,  734,  127,  723,  743,  727,  746,  744,  765,
      205,  236,  126,  126,  126,  127,  731,  218,  715,  236,
      751,  715,  793,  747,  261,  716,  144,  271,  272,  236,
      748,  271,  752,  271,  218,  271,  264,  772,  130,  211,
      764,  131,  271,  126,  126,  735,  126,  126,  126,  126,
      126,  126,  126,  126,  750,  126,  126,  739,  762,  715,

      739,  274,  715,  753,  740,  754,  716,  273,  761,  276,
      715,  755,  150,  715,  218,  759,  127,  716,  757,  297,
      760,  191,  763,  199,  741,  218,  745,  766,  205,  221,
      173,  236,  126,  126,  126,  126,  126,  749,  126,  126,
      126,  126,  126,  126,  126,  126,  758,  126,  126,  715,
      769,  211,  715,  274,  218,  218,  716,  275,  773,  774,
      739,  127,  127,  739,  218,  227,  127,  740,  127,  127,
      127,  775,  812,  776,  777,  778,  236,  218,  175,  150,
      781,  150,  784,  756,  126,  126,  126,  126,  126,  742,
      126,  126,  126,  126,  126,  126,  126,  126,  130,  126,

      126,  131,  736,  782,  623,  277,  782,  173,  191,  785,
      783,  621,  782,  611,  132,  782,  191,  786,  260,  783,
      199,  787,  609,  174,  150,  199,  788,  296,  205,  789,
      205,  790,  607,  191,  211,  791,  126,  126,  126,  126,
      126,  605,  126,  126,  126,  126,  126,  126,  126,  126,
      150,  126,  126,  782,  802,  175,  782,  277,  218,  782,
      783,  278,  782,  796,  782,  603,  783,  782,  211,  792,
      794,  783,  782,  794,  199,  782,  127,  795,  127,  783,
      205,  797,  191,  798,  601,  211,  804,  218,  126,  126,
      126,  126,  126,  236,  126,  126,  126,  126,  126,  126,

      126,  126,  599,  126,  126,  782,  236,  799,  782,  298,
      236,  800,  783,  782,  199,  205,  782,  211,  806,  808,
      783,  810,  127,  218,  127,  127,  597,  811,  794,  813,
      127,  794,  814,  236,  594,  795,  590,  816,  588,  586,
      126,  126,  126,  126,  126,  218,  126,  126,  126,  126,
      126,  126,  126,  126,  585,  126,  126,  817,  584,  819,
      817,  298,  819,  583,  818,  299,  820,  817,  819,  817,
      817,  819,  817,  577,  818,  820,  818,  576,  150,  819,
      150,  572,  819,  565,  817,  561,  820,  817,  191,  191,
      199,  818,  126,  126,  126,  242,  819,  557,  242,  819,

      199,  817,  553,  820,  817,  205,  821,  819,  818,  821,
      819,  544,  127,  822,  820,  535,  529,  205,  823,  525,
      523,  823,  211,  218,  519,  824,  515,  243,  211,  244,
      511,  501,  441,  429,  245,  218,  817,  246,  819,  817,
      247,  819,  425,  818,  817,  820,  421,  817,  417,  819,
      404,  818,  819,  127,  817,  127,  820,  817,  127,  819,
      821,  818,  819,  821,  393,  236,  820,  822,  387,  383,
      236,  127,  823,  381,  377,  823,  127,  218,  373,  824,
      369,  150,  297,  150,  351,  276,  273,  127,  264,  218,
       90,   90,   28,   28,  129,  129,  172,  172,  130,  130,

      173,  173,  261,  127,  126,  127,  127,  334,  333,  236,
      236,  127,  331,  127,  327,  218,  322,  321,  211,  318,
      317,  205,  314,  313,  199,  127,  310,  309,  191,  127,
      127,  295,  150,  150,  281,  280,  150,  127,  127,  259,
      127,  127,  127,  229,  228,  127,  223,  222,  218,  127,
      127,  127,  127,  825,   27,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825
    } ;

static const flex_int16_t yy_chk[2608] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,  384,    4,  384,   41,    2,   42,    4,
       41,    2,   42,    4,    2,    2,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   13,
       31,   32,   43,  159,   32,   43,   46,   35,   48,   71,
       44,  159,   71,   13,   45,   31,   46,   32,   35,   13,

       13,   45,   13,   14,   14,   14,   14,   44,   35,   35,
       49,   48,   45,   79,  850,   54,   79,   47,   50,   51,
       14,   49,   52,   55,  268,   54,   14,   14,   53,   14,
       15,   15,   47,   15,   47,   53,   50,   51,   15,   52,
       54,   55,   52,   56,   59,   57,   53,   15,   61,  118,
      268,   59,   60,   15,   15,   56,   15,   16,   16,  125,
       16,   57,   59,   60,  118,   16,   61,   62,   61,   60,
       84,   69,   70,   84,   16,   69,   70,   62,   77,  184,
       16,   16,   77,   16,   17,   17,   62,   17,   64,  125,
       78,   64,   17,   57,   78,   82,   64,  184,   83,   82,

       87,   17,   83,   89,   87,   64,   89,   17,   17,  121,
       17,   18,   18,   65,   18,   72,   65,  247,   72,   18,
       88,   65,   94,   72,   88,  121,   94,  101,   18,   97,
       65,  101,   72,  247,   18,   18,   97,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       21,   21,   73,   21,  117,   73,   92,   92,   92,   92,

       73,   91,   91,   91,   91,  104,  112,   21,  128,   73,
      112,  113,  104,   21,   21,  113,   21,  114,   91,  119,
      114,  117,   21,  128,   21,   93,   93,   93,   93,   21,
       98,   99,   21,   98,   99,   21,   23,   23,   98,   99,
      119,  105,   93,  120,  105,  848,  127,   98,   99,  105,
      127,  152,  129,   23,  138,  129,  152,  120,  105,   23,
       23,  137,   23,  139,  168,   23,   23,  106,  129,   23,
      106,   23,  120,   23,  132,  106,  138,  132,  140,  168,
       23,   25,  137,  143,  106,  140,   25,  139,  155,  156,
      132,  169,  155,  157,  132,  847,   25,   25,  156,  160,

       25,  158,   25,  144,   25,  162,  169,  170,  157,   25,
      165,   25,   26,  143,  157,  144,  144,   26,  158,  144,
      160,  144,  162,  144,  170,  161,  171,   26,   26,  164,
      144,   26,  165,   26,  161,   26,  167,  846,  164,  171,
       26,  172,   26,   33,   33,  180,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,  172,  167,  178,
      179,   33,  174,  245,  181,  182,  244,  180,  183,  185,
      186,   33,  193,  179,  845,  196,  178,  193,  174,  196,
      182,  244,  174,  181,  245,  183,  185,  204,  186,  172,
      186,  204,   33,   33,   33,   34,   34,  243,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,  187,
      174,  201,  188,   34,  189,  843,  201,  189,  197,  187,
      188,  197,  189,   34,  243,  188,  197,  246,  187,  188,
      248,  189,  188,  188,  207,  197,  210,  213,  238,  207,
      210,  246,  213,  238,   34,   34,   34,   36,   36,  216,
      218,  248,   36,  216,  218,   36,  246,   36,  250,  219,
      219,  219,  219,  220,  220,  220,  220,   36,   36,  221,
      221,   36,  267,   36,  222,   36,  219,  250,  222,  842,
       36,  222,   36,   37,   37,  267,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,  225,  223,  252,

      225,   37,  223,  227,  227,  225,  223,  841,  228,  229,
      251,   37,  228,  229,  225,  228,  252,  229,  241,  254,
      231,  263,  241,  231,  255,  266,  263,  255,  231,  255,
      266,  251,   37,   37,   37,   38,   38,  231,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,  254,
      394,  256,  255,   38,  256,  260,  256,  272,  260,  269,
      270,  270,  280,   38,  275,  256,  280,  269,  272,  275,
      260,  260,  278,  299,  279,  281,  394,  278,  299,  256,
      279,  281,  285,  283,   38,   38,   38,   39,   39,  286,
       39,   39,   39,   39,   39,   39,   39,   39,  283,   39,

       39,  284,  287,  285,  286,   39,  289,  290,  291,  292,
      293,  284,  287,  294,  289,  290,  296,  302,  293,  292,
      304,  309,  313,  308,  840,  309,  313,  302,  294,  308,
      304,  296,  296,  291,  300,  839,   39,   39,   39,   40,
       40,  301,   40,   40,   40,   40,   40,   40,   40,   40,
      303,   40,   40,  306,  307,  300,  300,   40,  838,  310,
      312,   40,  314,  301,  296,  310,  312,  303,  314,  316,
      306,  337,  318,  317,  320,  316,  307,  317,  318,  321,
      320,  322,  333,  321,  382,  337,  333,  322,   40,   40,
       40,   58,   58,  382,   58,   58,   58,   58,   58,   58,

       58,   58,   58,   58,   58,  324,  326,  327,  328,   58,
      330,  327,  336,  339,  338,  324,  326,  327,  328,   58,
      330,  331,  332,  334,  336,  331,  338,  343,  332,  334,
      353,  331,  339,  340,  408,  343,  340,  353,  341,  342,
       58,   58,   58,   63,  341,  342,  344,  408,  385,  340,
      385,   63,  346,   63,  344,  347,   63,  348,  346,  340,
       63,  347,  348,   63,   63,  350,  352,  354,   63,   67,
       67,  350,   67,   67,   67,   67,   67,   67,   67,   67,
      351,   67,   67,  355,  356,  357,  351,   67,  352,  354,
      358,  359,  361,  357,  362,  355,  395,  360,  361,  363,

      396,  359,  358,  356,  366,  365,  363,  370,  395,  366,
      364,  368,  370,  360,  362,  365,  396,  368,   67,   67,
       67,   68,   68,  360,   68,   68,   68,   68,   68,   68,
       68,   68,  364,   68,   68,  369,  372,  837,  373,   68,
      386,  369,  372,   68,  373,  360,  374,  376,  377,  386,
      378,  374,  380,  376,  377,  378,  381,  383,  380,  387,
      591,  383,  381,  387,  388,  383,  388,  387,  591,  392,
       68,   68,   68,   75,   75,  392,   75,   75,   75,   75,
       75,   75,   75,   75,  393,   75,   75,  389,  390,  389,
      393,   75,  397,  390,  398,  399,  400,  398,  401,  402,

      399,  400,  403,  401,  402,  403,  397,  404,  405,  405,
      398,  406,  406,  404,  452,  409,  407,  410,  452,  398,
      411,  415,   75,   75,   75,   76,   76,  409,   76,   76,
       76,   76,   76,   76,   76,   76,  407,   76,   76,  410,
      411,  413,  415,   76,  412,  414,  413,   76,  416,  417,
      836,  416,  418,  418,  433,  417,  419,  419,  420,  421,
      412,  420,  425,  414,  433,  421,  422,  422,  425,  412,
      423,  423,  426,  426,   76,   76,   76,   80,   80,  834,
       80,   80,   80,   80,   80,   80,   80,   80,  424,   80,
       80,  424,  412,  427,  427,   80,  428,  429,  833,  428,

      430,  430,  432,  429,  431,  431,  434,  435,  436,  432,
      437,  434,  435,  438,  439,  436,  441,  832,  438,  439,
      437,  440,  441,  444,  440,  446,   80,   80,   80,   81,
       81,  445,   81,   81,   81,   81,   81,   81,   81,   81,
      444,   81,   81,  442,  442,  443,  443,   81,  453,  446,
      447,   81,  448,  447,  453,  448,  449,  445,  450,  449,
      451,  450,  455,  451,  456,  457,  447,  455,  461,  465,
      831,  461,  464,  447,  456,  465,  464,  458,   81,   81,
       81,   85,   85,  457,   85,   85,   85,   85,   85,   85,
       85,   85,  459,   85,   85,  458,  460,  463,  462,   85,

      467,  830,  468,  469,  472,  467,  468,  463,  472,  469,
      459,  471,  460,  462,  473,  595,  471,  475,  477,  460,
      473,  476,  475,  479,  477,  476,  828,  481,  479,  481,
       85,   85,   85,   86,   86,  595,   86,   86,   86,   86,
       86,   86,   86,   86,  460,   86,   86,  492,  482,  483,
      483,   86,  482,  486,  485,   86,  485,  486,  487,  487,
      488,  489,  495,  491,  488,  493,  495,  489,  491,  492,
      496,  497,  498,  614,  496,  497,  498,  500,  500,  510,
      510,  614,   86,   86,   86,  108,  108,  493,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  494,

      501,  503,  494,  108,  502,  501,  504,  505,  502,  506,
      507,  508,  511,  108,  507,  494,  512,  511,  503,  675,
      512,  514,  514,  504,  505,  506,  508,  515,  675,  516,
      518,  518,  515,  516,  108,  108,  108,  109,  109,  824,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  519,  522,  522,  520,  109,  519,  506,  520,  523,
      527,  527,  524,  525,  523,  109,  524,  525,  529,  526,
      530,  548,  529,  525,  526,  530,  531,  531,  529,  534,
      534,  536,  537,  538,  548,  536,  109,  109,  109,  110,
      110,  822,  110,  110,  110,  110,  110,  110,  110,  110,

      535,  110,  110,  537,  538,  535,  539,  110,  544,  539,
      546,  546,  549,  552,  544,  553,  570,  550,  555,  555,
      570,  553,  539,  552,  557,  549,  539,  559,  559,  561,
      557,  592,  539,  550,  569,  561,  569,  550,  110,  110,
      110,  111,  111,  550,  111,  111,  111,  111,  111,  111,
      111,  111,  565,  111,  111,  563,  563,  592,  565,  111,
      567,  567,  572,  111,  571,  550,  572,  571,  573,  574,
      573,  575,  572,  574,  575,  576,  577,  579,  579,  576,
      581,  588,  577,  583,  582,  576,  588,  582,  584,  583,
      111,  111,  111,  115,  584,  585,  115,  581,  582,  586,

      582,  585,  587,  587,  589,  586,  590,  590,  589,  594,
      115,  597,  593,  596,  596,  594,  597,  598,  599,  599,
      706,  598,  600,  600,  601,  115,  593,  115,  593,  601,
      602,  820,  115,  706,  602,  115,  603,  603,  115,  116,
      604,  604,  116,  605,  818,  606,  607,  607,  605,  606,
      608,  608,  609,  799,  610,  795,  116,  609,  610,  612,
      593,  611,  611,  616,  612,  613,  613,  615,  616,  618,
      615,  116,  624,  116,  617,  617,  619,  618,  116,  619,
      791,  116,  620,  620,  116,  122,  621,  630,  122,  622,
      122,  621,  630,  622,  623,  623,  625,  626,  626,  625,

      122,  122,  624,  671,  122,  789,  122,  671,  122,  627,
      627,  633,  625,  122,  633,  122,  123,  625,  787,  123,
      635,  123,  628,  628,  629,  629,  631,  631,  632,  632,
      123,  123,  123,  634,  672,  123,  635,  123,  672,  123,
      637,  635,  785,  634,  123,  637,  123,  133,  133,  783,
      133,  133,  133,  133,  133,  133,  133,  133,  781,  133,
      133,  636,  636,  638,  638,  133,  639,  639,  635,  640,
      641,  749,  640,  642,  642,  641,  643,  643,  644,  645,
      748,  644,  646,  646,  645,  647,  647,  648,  649,  740,
      648,  650,  650,  649,  651,  651,  133,  133,  133,  134,

      134,  735,  134,  134,  134,  134,  134,  134,  134,  134,
      652,  134,  134,  652,  653,  653,  654,  134,  678,  654,
      655,  134,  678,  655,  656,  656,  657,  657,  658,  659,
      661,  658,  659,  660,  660,  661,  662,  662,  663,  663,
      664,  667,  668,  664,  673,  673,  667,  668,  134,  134,
      134,  135,  135,  665,  135,  135,  135,  135,  135,  135,
      135,  135,  666,  135,  135,  666,  669,  665,  670,  135,
      676,  669,  674,  670,  734,  674,  677,  666,  666,  674,
      679,  677,  680,  680,  679,  676,  676,  682,  683,  684,
      684,  682,  683,  674,  686,  688,  688,  695,  686,  674,

      135,  135,  135,  136,  136,  695,  136,  136,  136,  136,
      136,  136,  136,  136,  731,  136,  136,  681,  676,  685,
      681,  136,  685,  687,  681,  136,  685,  687,  696,  689,
      690,  691,  689,  696,  690,  691,  689,  699,  681,  730,
      685,  692,  692,  700,  681,  699,  685,  702,  700,  727,
      689,  702,  136,  136,  136,  145,  689,  772,  693,  703,
      708,  693,  772,  703,  708,  693,  145,  145,  145,  704,
      704,  145,  709,  145,  737,  145,  709,  737,  707,  693,
      726,  707,  145,  146,  146,  693,  146,  146,  146,  146,
      146,  146,  146,  146,  707,  146,  146,  697,  723,  701,

      697,  146,  701,  710,  697,  711,  701,  710,  722,  711,
      705,  713,  713,  705,  697,  719,  701,  705,  717,  719,
      721,  721,  725,  725,  697,  736,  701,  729,  729,  736,
      718,  705,  146,  146,  146,  147,  147,  705,  147,  147,
      147,  147,  147,  147,  147,  147,  718,  147,  147,  715,
      733,  733,  715,  147,  738,  741,  715,  147,  738,  741,
      739,  742,  716,  739,  796,  742,  715,  739,  743,  744,
      745,  743,  796,  744,  745,  747,  747,  739,  718,  755,
      755,  757,  757,  714,  147,  147,  147,  148,  148,  698,
      148,  148,  148,  148,  148,  148,  148,  148,  750,  148,

      148,  750,  694,  756,  580,  148,  756,  758,  760,  760,
      756,  578,  761,  568,  750,  761,  762,  762,  750,  761,
      763,  763,  566,  758,  756,  765,  765,  758,  766,  766,
      768,  768,  564,  761,  769,  769,  148,  148,  148,  149,
      149,  562,  149,  149,  149,  149,  149,  149,  149,  149,
      784,  149,  149,  764,  784,  758,  764,  149,  774,  767,
      764,  149,  767,  774,  770,  560,  767,  770,  771,  771,
      773,  770,  779,  773,  764,  779,  775,  773,  777,  779,
      767,  775,  786,  777,  558,  770,  786,  773,  149,  149,
      149,  176,  176,  779,  176,  176,  176,  176,  176,  176,

      176,  176,  556,  176,  176,  776,  778,  778,  776,  176,
      780,  780,  776,  782,  788,  790,  782,  792,  788,  790,
      782,  792,  776,  793,  798,  797,  554,  793,  794,  797,
      782,  794,  798,  800,  551,  794,  547,  800,  545,  543,
      176,  176,  176,  177,  177,  794,  177,  177,  177,  177,
      177,  177,  177,  177,  542,  177,  177,  801,  541,  802,
      801,  177,  802,  540,  801,  177,  802,  803,  804,  805,
      803,  804,  805,  533,  803,  804,  805,  532,  801,  806,
      802,  528,  806,  521,  807,  517,  806,  807,  803,  804,
      805,  807,  177,  177,  177,  242,  808,  513,  242,  808,

      806,  809,  509,  808,  809,  807,  811,  810,  809,  811,
      810,  499,  242,  811,  810,  490,  484,  808,  812,  480,
      478,  812,  809,  811,  474,  812,  470,  242,  810,  242,
      466,  454,  391,  379,  242,  812,  813,  242,  814,  813,
      242,  814,  375,  813,  815,  814,  371,  815,  367,  816,
      349,  815,  816,  813,  817,  814,  816,  817,  345,  819,
      821,  817,  819,  821,  335,  815,  819,  821,  329,  325,
      816,  817,  823,  323,  319,  823,  819,  821,  315,  823,
      311,  305,  297,  288,  282,  276,  273,  271,  264,  823,
      826,  826,  827,  827,  829,  829,  835,  835,  844,  844,

      849,  849,  261,  258,  257,  253,  249,  240,  239,  236,
      234,  232,  230,  226,  224,  217,  215,  214,  211,  209,
      208,  205,  203,  202,  199,  198,  195,  194,  191,  190,
      175,  173,  166,  163,  154,  153,  150,  142,  131,  130,
      126,  124,  107,  103,  102,  100,   96,   95,   90,   74,
       66,   29,   28,   27,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nksp.l"
/*
 * Copyright (c) 2015-2020 Christian Schoenebeck
 *
 * http://www.linuxsampler.org
 *
 * This file is part of LinuxSampler and released under the same terms.
 * See README file for details.
 */
/* Token scanner used for generating syntax highlighting for NKSP instrument
   script language code (this is not used by the sampler itself, but rather
   provided for external script editor applications). */
#line 15 "nksp.l"

#include "NkspScanner.h"
// reentrant scanner data context
#define YY_EXTRA_TYPE NkspScanner*
// custom (f)lex input for reading from std::istream object
#define YY_INPUT(buf,result,max_size)   \
{                                       \
    char c = yyextra->is->get();        \
    if (yyextra->is->eof())             \
        result = YY_NULL;               \
    else {                              \
        buf[0] = c;                     \
        result = 1;                     \
    }                                   \
}
// handle position (line, column) for each recognized token
#define YY_USER_ACTION               \
    yyextra->line   = yylineno - 1;  \
    yyextra->column = yycolumn;      \
    yyextra->offset += (int) yyleng; \
    yyextra->length =  (int) yyleng; \
    yycolumn += yyleng;

using namespace LinuxSampler;

static int countNewLineChars(const char* txt) {
    int n = 0;
    for (int i = 0; txt[i]; ++i)
        if (txt[i] == '\n') ++n;
    return n;
}

// shut up warning that 'register' keyword is deprecated as of C++11
#if defined(__cplusplus) && __cplusplus >= 201103L
# define register
#endif

// Since this parser is solely used by script code editors, thus not used in a
// real-time context, always throw an exception instead of exiting on fatal
// lexer errors (so the debugger may pause with the appropriate back trace)
#include <stdexcept>
#define YY_FATAL_ERROR(msg) throw std::runtime_error(msg)

#line 1647 "lex.Nksp_.c"
/* generate a reentrant safe scanner */
/* avoid symbol collision with ones of other scanners */
/* yywrap() would be called at EOF, we don't need it */
/* enable functions yy_push_state(), yy_pop_state(), yy_top_state() */
/* inclusive scanner conditions */

/* exclusive scanner conditions */

#line 1656 "lex.Nksp_.c"

#define INITIAL 0
#define PREPROC_BODY_USE 1
#define PREPROC_SET_COND 2
#define PREPROC_RESET_COND 3
#define PREPROC_IF 4
#define PREPROC_IF_NOT 5
#define PREPROC_BODY_EAT 6
#define PREPROC_PRE_BODY_USE 7
#define PREPROC_PRE_BODY_EAT 8
#define PREPROC_EVENT_NAME 9
#define PREPROC_END_NAME 10
#define METRIC 11
#define UNIT 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  , yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 80 "nksp.l"


#line 1957 "lex.Nksp_.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 826 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2555 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 82 "nksp.l"
{
    yyextra->token = StringLiteralToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 87 "nksp.l"
{
    yyextra->token = NumberLiteralToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 92 "nksp.l"
{
    yy_push_state(METRIC, yyscanner);
    yyextra->token = NumberLiteralToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 98 "nksp.l"
{
    yy_push_state(UNIT, yyscanner);
    yyextra->token = NumberLiteralToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 104 "nksp.l"
{
    yyextra->token = MetricPrefixToken(yytext);
    yy_pop_state(yyscanner);
    return yyextra->token.baseType;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 110 "nksp.l"
{
    yyextra->token = MetricPrefixToken(yytext);
    yy_pop_state(yyscanner);
    yy_push_state(UNIT, yyscanner);
    return yyextra->token.baseType;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 117 "nksp.l"
{
    yyextra->token = StdUnitToken(yytext);
    yy_pop_state(yyscanner);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Preprocessor statement:  SET_CONDITION(name) */
case 8:
YY_RULE_SETUP
#line 126 "nksp.l"
{
    //printf("SET_CONDITION\n");
    yy_push_state(PREPROC_SET_COND, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 132 "nksp.l"
{
    //printf("preproc set condition '%s'\n", yytext);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 137 "nksp.l"
{
    //printf("End of PREPROC_SET_COND\n");
    yy_pop_state(yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Preprocessor statement:  RESET_CONDITION(name) */
case 11:
YY_RULE_SETUP
#line 147 "nksp.l"
{
    //printf("RESET_CONDITION\n");
    yy_push_state(PREPROC_RESET_COND, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 153 "nksp.l"
{
    //printf("preproc reset condition '%s'\n", yytext);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 158 "nksp.l"
{
    //printf("End of RESET_CONDITION\n");
    yy_pop_state(yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Preprocessor conditional statements:

    USE_CODE_IF(name)
      ...
    END_USE_CODE

    and:

    USE_CODE_IF_NOT(name)
      ...
    END_USE_CODE    
 */
case 14:
YY_RULE_SETUP
#line 179 "nksp.l"
{
    //printf("USE_CODE_IF\n");
    yy_push_state(PREPROC_IF, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 185 "nksp.l"
{
    //printf("USE_CODE_IF_NOT\n");
    yy_push_state(PREPROC_IF_NOT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 191 "nksp.l"
{
    //printf("preproc use code if '%s'\n", yytext);
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_PRE_BODY_USE, yyscanner);
    //yy_push_state(PREPROC_PRE_BODY_EAT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 199 "nksp.l"
{
    //printf("preproc use code if not '%s'\n", yytext);
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_PRE_BODY_USE, yyscanner);
    //yy_push_state(PREPROC_PRE_BODY_EAT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 207 "nksp.l"
{
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_BODY_USE, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 213 "nksp.l"
{
    //printf("PREPROCESSOR EAT : \n");
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_BODY_EAT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 220 "nksp.l"
{
    //printf("-->END_USE_CODE\n");
    yy_pop_state(yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 226 "nksp.l"
/* eat up code block filtered out by preprocessor */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 227 "nksp.l"
/* eat up code block filtered out by preprocessor */
	YY_BREAK
/* Event Handler Names (only if they occur alone in a document!) */
case 23:
YY_RULE_SETUP
#line 232 "nksp.l"
{
    yyextra->token = EventHandlerNameToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Language keywords */
case 24:
YY_RULE_SETUP
#line 240 "nksp.l"
{
    yy_push_state(PREPROC_EVENT_NAME, yyscanner);
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 246 "nksp.l"
{
    yy_pop_state(yyscanner);
    yyextra->token = EventHandlerNameToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 252 "nksp.l"
{
    yy_push_state(PREPROC_END_NAME, yyscanner);
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 258 "nksp.l"
{
    yy_pop_state(yyscanner);
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 264 "nksp.l"
{
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 269 "nksp.l"
{
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Variables */
case 30:
YY_RULE_SETUP
#line 277 "nksp.l"
{
    yyextra->token = IntegerVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 282 "nksp.l"
{
    yyextra->token = RealVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 287 "nksp.l"
{
    yyextra->token = StringVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 292 "nksp.l"
{
    yyextra->token = IntegerArrayVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 297 "nksp.l"
{
    yyextra->token = RealArrayVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 302 "nksp.l"
{
    yyextra->token = IdentifierToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* other */
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 310 "nksp.l"
{
    yyextra->token = NewLineToken();
    ++yylineno;
    yycolumn = 0;
    return yyextra->token.baseType;
}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 317 "nksp.l"
{
    yyextra->token = CommentToken(yytext);
    yylineno += countNewLineChars(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 323 "nksp.l"
{
    yyextra->token = OtherToken("    ");
    return yyextra->token.baseType;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 328 "nksp.l"
/* eat up \r */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPROC_BODY_USE):
case YY_STATE_EOF(PREPROC_SET_COND):
case YY_STATE_EOF(PREPROC_RESET_COND):
case YY_STATE_EOF(PREPROC_IF):
case YY_STATE_EOF(PREPROC_IF_NOT):
case YY_STATE_EOF(PREPROC_BODY_EAT):
case YY_STATE_EOF(PREPROC_PRE_BODY_USE):
case YY_STATE_EOF(PREPROC_PRE_BODY_EAT):
case YY_STATE_EOF(PREPROC_EVENT_NAME):
case YY_STATE_EOF(PREPROC_END_NAME):
case YY_STATE_EOF(METRIC):
case YY_STATE_EOF(UNIT):
#line 330 "nksp.l"
{
    yyextra->token = EofToken();
    yyterminate();
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 335 "nksp.l"
{
    yyextra->token = OtherToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 341 "nksp.l"
ECHO;
	YY_BREAK
#line 2437 "lex.Nksp_.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 826 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 826 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 825);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    yyfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 341 "nksp.l"


namespace LinuxSampler {

int NkspScanner::processScanner() {
    return Nksp_lex(scanner);
}

void NkspScanner::createScanner(std::istream* is) {
    if (scanner) destroyScanner();
    this->is = is;
    Nksp_lex_init(&scanner);
    Nksp_set_extra(this, scanner);
}

void NkspScanner::destroyScanner() {
    if (!scanner) return;
    Nksp_lex_destroy(scanner);
    scanner = NULL;
}

} // namespace LinuxSampler

